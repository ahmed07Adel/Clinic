// <auto-generated />
using System;
using Clinic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Clinic.Entities.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddminssionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionRequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmittingDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorInCharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ERAdmission")
                        .HasColumnType("bit");

                    b.Property<int>("EstimatedLengthOfDays")
                        .HasColumnType("int");

                    b.Property<bool>("HasPatientMobile")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalIsolation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceAdviced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrafficScheme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BedId")
                        .IsUnique();

                    b.HasIndex("PatientSubTypeId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("Clinic.Entities.AdmissionPadiatricandNeonate", b =>
                {
                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<int>("PadiatricandNeonateId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AdmissionId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdmissionId", "PadiatricandNeonateId");

                    b.HasIndex("AdmissionId1");

                    b.HasIndex("PadiatricandNeonateId");

                    b.ToTable("AdmissionPadiatricandNeonates");
                });

            modelBuilder.Entity("Clinic.Entities.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<string>("BedBillingClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<string>("BedType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("Clinic.Entities.PadiatricandNeonate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PadiatricandNeonates");
                });

            modelBuilder.Entity("Clinic.Entities.PatientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientTypes");
                });

            modelBuilder.Entity("Clinic.Entities.Admission", b =>
                {
                    b.HasOne("Clinic.Entities.Bed", "Bed")
                        .WithOne("Admission")
                        .HasForeignKey("Clinic.Entities.Admission", "BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Entities.PatientType", "PatientSubType")
                        .WithMany("AdmissionsSubTypes")
                        .HasForeignKey("PatientSubTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Entities.PatientType", "PatientType")
                        .WithMany("AdmissionTypes")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("PatientSubType");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("Clinic.Entities.AdmissionPadiatricandNeonate", b =>
                {
                    b.HasOne("Clinic.Entities.Admission", "Admission")
                        .WithMany("AdmissionPadiatricandNeonates")
                        .HasForeignKey("AdmissionId1");

                    b.HasOne("Clinic.Entities.PadiatricandNeonate", "PadiatricandNeonate")
                        .WithMany("AdmissionPadiatricandNeonates")
                        .HasForeignKey("PadiatricandNeonateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("PadiatricandNeonate");
                });

            modelBuilder.Entity("Clinic.Entities.Admission", b =>
                {
                    b.Navigation("AdmissionPadiatricandNeonates");
                });

            modelBuilder.Entity("Clinic.Entities.Bed", b =>
                {
                    b.Navigation("Admission");
                });

            modelBuilder.Entity("Clinic.Entities.PadiatricandNeonate", b =>
                {
                    b.Navigation("AdmissionPadiatricandNeonates");
                });

            modelBuilder.Entity("Clinic.Entities.PatientType", b =>
                {
                    b.Navigation("AdmissionsSubTypes");

                    b.Navigation("AdmissionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
